From: Vaclav Ovsik <vaclav.ovsik@i.cz>
Subject: [PATCH] fixes/man-spelling

Fixes spelling errors found by lintian.

Signed-off-by: Vaclav Ovsik <vaclav.ovsik@i.cz>

---
 Documentation/ustr-import.1 |  6 +++---
 Documentation/ustr.3        | 22 +++++++++++-----------
 Documentation/ustr_const.3  |  2 +-
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/Documentation/ustr-import.1 b/Documentation/ustr-import.1
index 153c48f..f8555ab 100644
--- a/Documentation/ustr-import.1
+++ b/Documentation/ustr-import.1
@@ -9,16 +9,16 @@ ustr\-import \- ustr string library import tool
 .sp
 .ti
 .SH "DESCRIPTION"
- This tool lets you use the Ustr string library without incuring dependancies on the library itself, so API/ABI compatability is 100% (nothing changes unless you do it) and installing your application doesn't require the library to be pre\-installed\&.
+ This tool lets you use the Ustr string library without incuring dependencies on the library itself, so API/ABI compatibility is 100% (nothing changes unless you do it) and installing your application doesn't require the library to be pre\-installed\&.
 .SH "OPTIONS"
 
 .TP
 \-\-32
-If you installed with multilib, this runs the 32 bit varient (and installs the variable multilib build code as ustr\-conf.h)\&.
+If you installed with multilib, this runs the 32 bit variant (and installs the variable multilib build code as ustr\-conf.h)\&.
 
 .TP
 \-\-64
-If you installed with multilib, this runs the 64 bit varient (and installs the variable multilib build code as ustr\-conf.h)\&.
+If you installed with multilib, this runs the 64 bit variant (and installs the variable multilib build code as ustr\-conf.h)\&.
 
 .TP
 \-d
diff --git a/Documentation/ustr.3 b/Documentation/ustr.3
index 88acab9..81675d6 100644
--- a/Documentation/ustr.3
+++ b/Documentation/ustr.3
@@ -6556,7 +6556,7 @@ Type\fB[3]\fR: char
 \fBNote:\fR
 
 .br
-  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the begining, so to do a loop you need to take the position from the length.
+  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the beginning, so to do a loop you need to take the position from the length.
 
 .ti -2
 .br
@@ -6629,7 +6629,7 @@ Type\fB[4]\fR: size_t
 \fBNote:\fR
 
 .br
-  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the begining, so to do a loop you need to take the position from the length.
+  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the beginning, so to do a loop you need to take the position from the length.
 
 .ti -2
 .br
@@ -6692,7 +6692,7 @@ Type\fB[3]\fR: const struct Ustr *
 \fBNote:\fR
 
 .br
-  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the begining, so to do a loop you need to take the position from the length.
+  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the beginning, so to do a loop you need to take the position from the length.
 
 .ti -2
 .br
@@ -6755,7 +6755,7 @@ Type\fB[3]\fR: const char *
 \fBNote:\fR
 
 .br
-  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the begining, so to do a loop you need to take the position from the length.
+  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the beginning, so to do a loop you need to take the position from the length.
 
 .ti -2
 .br
@@ -6838,7 +6838,7 @@ Type\fB[5]\fR: size_t
 \fBNote:\fR
 
 .br
-  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the begining, so to do a loop you need to take the position from the length.
+  The searching starts from the end of the string, and so the offset is the offset from the end. However the position of a byte is always relative to the beginning, so to do a loop you need to take the position from the length.
 
 .ti -2
 .br
@@ -8248,12 +8248,12 @@ Type\fB[3]\fR: size_t
 \fBExplanation:\fR
 
 .br
-  This function is the opposite of ustr_io_get(), taking bytes from the beginning of the Ustr and writting them to the file.
+  This function is the opposite of ustr_io_get(), taking bytes from the beginning of the Ustr and writing them to the file.
 .sp
 \fBNote:\fR
 
 .br
-  Deleting bytes from the begining of a Ustr string is the most inefficient thing to do, so it is recommended to use ustr_io_putfile().
+  Deleting bytes from the beginning of a Ustr string is the most inefficient thing to do, so it is recommended to use ustr_io_putfile().
 
 .ti -2
 .br
@@ -8282,7 +8282,7 @@ Type\fB[3]\fR: size_t
 \fBExplanation:\fR
 
 .br
-  This function works like calling ustr_io_put(), and then writting a '\\n' to the file.
+  This function works like calling ustr_io_put(), and then writing a '\\n' to the file.
 .sp
 \fBNote:\fR
 
@@ -8404,7 +8404,7 @@ Type\fB[3]\fR: size_t
 \fBNote:\fR
 
 .br
-  You can think of the operation as two seperate tasks, one which makes the current data in the Ustr undefined and the second which adds undefined data to the ustr to accomodate the desired length.
+  You can think of the operation as two separate tasks, one which makes the current data in the Ustr undefined and the second which adds undefined data to the ustr to accommodate the desired length.
 
 .ti -2
 .br
@@ -10160,7 +10160,7 @@ Type\fB[3]\fR: size_t
 \fBExplanation:\fR
 
 .br
-  This function deletes the bytes at the begining of the Ustr (Parameter[1]) that are in the span (Parameter[2]) of the specificed length (parameter[2]).
+  This function deletes the bytes at the beginning of the Ustr (Parameter[1]) that are in the span (Parameter[2]) of the specificed length (parameter[2]).
 
 .ti -2
 .br
@@ -10314,7 +10314,7 @@ Type\fB[3]\fR: size_t
 \fBExplanation:\fR
 
 .br
-  This function deletes the bytes at the begining or end of the Ustr (Parameter[1]) that are in the span (Parameter[2]) of the specificed length (parameter[2]).
+  This function deletes the bytes at the beginning or end of the Ustr (Parameter[1]) that are in the span (Parameter[2]) of the specificed length (parameter[2]).
 .sp
 \fBNote:\fR
 
diff --git a/Documentation/ustr_const.3 b/Documentation/ustr_const.3
index 18d6b8b..599c625 100644
--- a/Documentation/ustr_const.3
+++ b/Documentation/ustr_const.3
@@ -393,7 +393,7 @@ ustr_const \- ustr string library constants
 \fBExplanation:\fR
 
 .br
-  This flag allows the parsing (and ignoring) of the seperator character, at arbitrary pointers in the number, so "1234" and "1_234" would both parse the same (assuming "_" is the seperator).
+  This flag allows the parsing (and ignoring) of the separator character, at arbitrary pointers in the number, so "1234" and "1_234" would both parse the same (assuming "_" is the separator).
 
 .br
 \fBConstant: \fR USTR_FLAG_PARSE_NUM_OVERFLOW
-- 
tg: (09206e5..) fixes/man-spelling (depends on: fixes/man-cleanup)
