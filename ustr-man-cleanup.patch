From: Vaclav Ovsik <vaclav.ovsik@i.cz>
Subject: [PATCH] fixes/man-cleanup

The patch cleans up man pages (removes undefined macros).

Signed-off-by: Vaclav Ovsik <vaclav.ovsik@i.cz>

---
 Documentation/txt2man.pl | 18 ++++++++++++------
 Documentation/ustr.3     | 19 -------------------
 2 files changed, 12 insertions(+), 25 deletions(-)

diff --git a/Documentation/txt2man.pl b/Documentation/txt2man.pl
index 017d0a2..2078997 100755
--- a/Documentation/txt2man.pl
+++ b/Documentation/txt2man.pl
@@ -169,6 +169,7 @@ sub conv_A_refs
 sub convert()
   {
     my $in_pre_tag = "";
+    my $in_pre = 0;
     my $in_const = 0;
 
     while (<IN>)
@@ -231,23 +232,28 @@ sub convert()
 	    if (/\.\.\.$/)
 	      {
 		conv_A_refs(1, 1, 0);
-		$_ = ".Ve\n$_.Vb 4\n";
-		$in_pre_tag = "\n.Ve";
+#		$_ = ".Ve\n$_.Vb 4\n";
+#		$in_pre_tag = "\n.Ve";
+		$in_pre_tag = "";
+		$in_pre = 1;
 	      }
 	    else
 	      {
 		conv_A_refs(1, 1, 0);
-		$_ = ".Ve\n$_";
+#		$_ = ".Ve\n$_";
 		$in_pre_tag = "";
+		$in_pre = 0;
 	      }
 	  }
 	elsif (/\.\.\.$/)
 	  {
 	    conv_A_refs(1, 1, 0);
-	    $_ = "$_\n.Vb 4";
-	    $in_pre_tag = "\n.Ve";
+#	    $_ = "$_\n.Vb 4";
+#	    $in_pre_tag = "\n.Ve";
+	    $in_pre_tag = "";
+	    $in_pre = 1;
 	  }
-	elsif (!$in_pre_tag)
+	elsif (!$in_pre)
 	  {
 	    if (!/^$/)
 	      {
diff --git a/Documentation/ustr.3 b/Documentation/ustr.3
index a8301b5..88acab9 100644
--- a/Documentation/ustr.3
+++ b/Documentation/ustr.3
@@ -1317,24 +1317,18 @@ Type\fB[2]\fR: const char[]
 .br
   This macro function simplifies the creation of read\-only Ustr string's. And is normally used like...
 
-.Vb 4
   USTR1(\\x4, "abcd")
 
-.Ve
  ...it is worth pointing out that running with debugging turned on
  (USTR_CONF_USE_ASSERT) will complain if the length isn't encoded correctly, as in...
 
-.Vb 4
   USTR1(\\x3, "abcd")
 
-.Ve
  ...here ustr_assert_valid() will fail, which is called before most functions do
  anything in debugging mode. Note also that extra debugging (USTR_CONF_USE_EOS_MARK) will still catch cases like...
 
-.Vb 4
   USTR1(\\x3, "abc\\0d")
 
-.Ve
  ...at least using debugging is esp. important if you are putting UTF\-8
  characters into the strings.
 .sp
@@ -1731,7 +1725,6 @@ Type\fB[1]\fR: size_t
 
 .br
   char buf[USTR_SIZE_FIXED(4)];
-.Ve
  ...to give you exactly 4 bytes as a maximum, this is esp. useful if you want
  a limited (ustr_limited() == USTR_TRUE) Ustr string.
 
@@ -1810,11 +1803,9 @@ Type\fB[3]\fR: size_t
 .br
   This does mean that the first argument must be the correct size, as far as sizeof() is concerned, as in...
 
-.Vb 4
  char buf_sz[1024];
  Ustr *s1 = USTR_SC_INIT_AUTO(buf_sz, USTR_FALSE, 0);
 
-.Ve
  ...so passing pointers to memory from malloc() will probably just return NULL.
 
 
@@ -1852,11 +1843,9 @@ Type\fB[3]\fR: size_t
 .br
   This does mean that the first argument must be the correct size, as far as sizeof() is concerned, as in...
 
-.Vb 4
  char buf_sz[1024] = USTR_BEG_FIXED2 "abcd";
  Ustr *s1 = USTR_SC_INIT_AUTO_OSTR(buf_sz, USTR_FALSE, "abcd");
 
-.Ve
  ...so passing pointers to memory from malloc() will probably just return NULL.
 
 
@@ -9031,11 +9020,9 @@ Type\fB[6]\fR: size_t lim
   This function replaces a repeating sequence of characters with another repeating sequence of characters. 
   For example...
 
-.Vb 4
   Ustr *data = ustr_dup_cstr("xxxBxxCxDxxx");
   ustr_replace_rep_chr(&data,'x',2,'y',1, 0)
 
-.Ve
  ...would change data to be "yxByCxDyx".
 
 
@@ -9092,16 +9079,13 @@ Type\fB[6]\fR: unsigned int
 .br
   Parameter[5] is a a pointer to a Ustr where the return value will be placed. Passing a USTR_NULL to this parameter will cause the string to be allocated and \fBMUST\fR be freed \fBmanually\fR. If, however, you pass in a non\-null Ustr to this parameter, each call to ustr_split_buf() will free what is in this pointer and place the new token there (when USTR_NULL is returned, nothing needs to be free'd).  For example, given...
 
-.Vb 4
   Ustr *data = ...;
   Ustr *tok = USTR_NULL;
   const char *sep = ",";
   size_t off = 0;
   unsigned int flags = USTR_FLAGS_SPLIT_DEF;
 
-.Ve
  ...there are two options...
-.Vb 4
 
   while ((tok = ustr_split_buf(data, &off, sep, strlen(sep), tok, flags)))
   {
@@ -9110,9 +9094,7 @@ Type\fB[6]\fR: unsigned int
   }
   /* tok is now NULL again after the loop */
 
-.Ve
  ...or...
-.Vb 4
 
   while ((tok = ustr_split_buf(data, &off, sep, strlen(sep), USTR_NULL, flags)))
   {
@@ -9121,7 +9103,6 @@ Type\fB[6]\fR: unsigned int
       ustr_free(tok); /* have to free to avoid mem leaks */
   }
 
-.Ve
  ...the former of which being the safer option.
 
 .sp
-- 
tg: (b148fb7..) fixes/man-cleanup (depends on: upstream)
